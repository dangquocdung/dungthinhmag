{"version":3,"sources":["use-custom-fields.js"],"names":[],"mappingsfile":"use-custom-fields.js","sourcesContent":["/**\n * Json encode\n * @param object\n */\nvar json_encode = function (object) {\n    \"use strict\";\n    if (typeof object === 'undefined') {\n        object = null;\n    }\n    return JSON.stringify(object);\n};\n\n/**\n * Json decode\n * @param jsonString\n * @param defaultValue\n * @returns {*}\n */\nvar json_decode = function (jsonString, defaultValue) {\n    \"use strict\";\n    if (typeof jsonString === 'string') {\n        var result;\n        try {\n            result = $.parseJSON(jsonString);\n        } catch (err) {\n            result = defaultValue;\n        }\n        return result;\n    }\n    return jsonString;\n};\n\nvar UseCustomFields = function ($) {\n    var $body = $('body'),\n        $window = $(window),\n        $document = $(document);\n    /**\n     * Where to show the custom field elements\n     */\n    var $_UPDATE_TO = $('#custom_fields_container');\n    /**\n     * Where to export json data when submit form\n     */\n    var $_EXPORT_TO = $('#custom_fields_json');\n\n    /**\n     * Current field data\n     */\n    var CURRENT_DATA = json_decode($_EXPORT_TO.val(), []);\n\n    var handleCustomFields = function () {\n        var repeaterFieldAdded = 0;\n        /**\n         * The html template of custom fields\n         */\n        var fieldTemplate = {\n            fieldGroup: $('#_render_customfield_field_group_template').html(),\n            globalSkeleton: $('#_render_customfield_global_skeleton_template').html(),\n            text: $('#_render_customfield_text_template').html(),\n            number: $('#_render_customfield_number_template').html(),\n            email: $('#_render_customfield_email_template').html(),\n            password: $('#_render_customfield_password_template').html(),\n            textarea: $('#_render_customfield_textarea_template').html(),\n            checkbox: $('#_render_customfield_checkbox_template').html(),\n            radio: $('#_render_customfield_radio_template').html(),\n            select: $('#_render_customfield_select_template').html(),\n            image: $('#_render_customfield_image_template').html(),\n            file: $('#_render_customfield_file_template').html(),\n            wysiwyg: $('#_render_customfield_wysiswg_template').html(),\n            repeater: $('#_render_customfield_repeater_template').html(),\n            repeaterItem: $('#_render_customfield_repeater_item_template').html(),\n            repeaterFieldLine: $('#_render_customfield_repeater_line_template').html()\n        };\n\n        var initCustomFieldsBoxes = function (boxes, $appendTo) {\n            boxes.forEach(function (box, indexBox) {\n                var skeleton = fieldTemplate.globalSkeleton;\n                skeleton = skeleton.replace(/__type__/gi, box.type || '');\n                skeleton = skeleton.replace(/__title__/gi, box.title || '');\n                skeleton = skeleton.replace(/__instructions__/gi, box.instructions || '');\n\n                var $skeleton = $(skeleton);\n                $skeleton.find('.meta-box-wrap').append(registerLine(box));\n                $skeleton.data('lcf-registered-data', box);\n                $appendTo.append($skeleton);\n            });\n        };\n\n        var registerLine = function (box) {\n            var result = fieldTemplate[box.type],\n                $wrapper = $('<div class=\"lcf-' + box.type + '-wrapper\"></div>');\n            $wrapper.data('lcf-registered-data', box);\n            switch (box.type) {\n                case 'text':\n                case 'number':\n                case 'email':\n                case 'password':\n                    result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    break;\n                case 'textarea':\n                    result = result.replace(/__rows__/gi, box.options.rows || 3);\n                    result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    break;\n                case 'image':\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    break;\n                case 'file':\n                    var detail = null;\n                    if (box.value != null) {\n                        result = result.replace(/__value__/gi, box.value.id || box.options.defaultValue || '');\n                        detail = '<a href=\"' + Botble.routes.home + box.value.public_url + '\" target=\"_blank\">' + box.value.name + '</a>';\n                    } else {\n                        result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    }\n\n                    result = result.replace(/__detail__/gi, detail || 'No file selected');\n                    break;\n                case 'select':\n                    var $result = $(result);\n                    var choices = parseChoices(box.options.selectChoices);\n                    choices.forEach(function (choice, index) {\n                        $result.append('<option value=\"' + choice[0] + '\">' + choice[1] + '</option>');\n                    });\n                    $result.val(Helpers.arrayGet(box, 'value', box.options.defaultValue));\n                    $wrapper.append($result);\n                    return $wrapper;\n                    break;\n                case 'checkbox':\n                    var choices = parseChoices(box.options.selectChoices);\n                    var boxValue = json_decode(box.value);\n                    choices.forEach(function (choice, index) {\n                        var template = result.replace(/__value__/gi, choice[0] || '');\n                        template = template.replace(/__title__/gi, choice[1] || '');\n                        template = template.replace(/__checked__/gi, ($.inArray(choice[0], boxValue) != -1) ? 'checked' : '');\n                        $wrapper.append($(template));\n                    });\n                    return $wrapper;\n                    break;\n                case 'radio':\n                    var choices = parseChoices(box.options.selectChoices);\n                    var isChecked = false;\n                    choices.forEach(function (choice, index) {\n                        var template = result.replace(/__value__/gi, choice[0] || '');\n                        template = template.replace(/__id__/gi, box.id + box.slug + repeaterFieldAdded);\n                        template = template.replace(/__title__/gi, choice[1] || '');\n                        template = template.replace(/__checked__/gi, (box.value === choice[0]) ? 'checked' : '');\n                        $wrapper.append($(template));\n\n                        if (box.value === choice[0]) {\n                            isChecked = true;\n                        }\n                    });\n                    if (isChecked === false) {\n                        $wrapper.find('input[type=radio]:first').prop('checked', true);\n                    }\n                    return $wrapper;\n                    break;\n                case 'repeater':\n                    var $result = $(result);\n                    $result.data('lcf-registered-data', box);\n\n                    $result.find('> .repeater-add-new-field').html(box.options.buttonLabel || 'Add new item');\n                    $result.find('> .sortable-wrapper').sortable();\n                    registerRepeaterItem(box.items, box.value || [], $result.find('> .field-group-items'));\n                    return $result;\n                    break;\n                case 'wysiwyg':\n                    result = result.replace(/__value__/gi, box.value || '');\n                    result = result.replace(/__id__/gi, 'editor_' + createRandomId());\n                    result = result.replace(/__type__/gi, box.options.wysiwygToolbar);\n                    break;\n            }\n            $wrapper.append($(result));\n            return $wrapper;\n        };\n\n        var createRandomId = function () {\n            var text = '';\n            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n            for (var i = 0; i < 5; i++)\n                text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n            return text;\n        };\n\n        var registerRepeaterItem = function (items, data, $appendTo) {\n            $appendTo.data('lcf-registered-data', items);\n            data.forEach(function (dataItem, indexData) {\n                var indexCss = $appendTo.find('> .ui-sortable-handle').length + 1;\n                var result = fieldTemplate.repeaterItem;\n                result = result.replace(/__position__/gi, indexCss);\n\n                var $result = $(result);\n                $result.data('lcf-registered-data', items);\n\n                registerRepeaterFieldLine(items, dataItem, $result.find('> .field-line-wrapper > .field-group'));\n\n                $appendTo.append($result);\n            });\n            return $appendTo;\n        };\n\n        var registerRepeaterFieldLine = function (items, data, $appendTo) {\n            data.forEach(function (item, index) {\n                repeaterFieldAdded++;\n\n                var result = fieldTemplate.repeaterFieldLine;\n                result = result.replace(/__title__/gi, item.title || '');\n                result = result.replace(/__instructions__/gi, item.instructions || '');\n\n                var $result = $(result);\n                $result.data('lcf-registered-data', item);\n                $result.find('> .repeater-item-input').append(registerLine(item));\n\n                $appendTo.append($result);\n            });\n            return $appendTo;\n        };\n\n        var parseChoices = function (choiceString) {\n            var choices = [];\n            choiceString.split('\\n').forEach(function (item, index) {\n                var currentChoice = item.split(':');\n                if (currentChoice[0] && currentChoice[1]) {\n                    currentChoice[0] = currentChoice[0].trim();\n                    currentChoice[1] = currentChoice[1].trim();\n                }\n                choices.push(currentChoice);\n            });\n            return choices;\n        };\n\n        /**\n         * Remove field item\n         */\n        $body.on('click', '.remove-field-line', function (event) {\n            event.preventDefault();\n            var current = $(this);\n            current.parent().animate({\n                    opacity: 0.1\n                },\n                300, function () {\n                    current.parent().remove();\n                });\n        });\n\n        /**\n         * Collapse field item\n         */\n        $body.on('click', '.collapse-field-line', function (event) {\n            event.preventDefault();\n            var current = $(this);\n            current.toggleClass('collapsed-line');\n        });\n\n        /**\n         * Add new repeater line\n         */\n        $body.on('click', '.repeater-add-new-field', function (event) {\n            event.preventDefault();\n            var $groupWrapper = $.extend(true, {}, $(this).prev('.field-group-items'));\n            var registeredData = $groupWrapper.data('lcf-registered-data');\n\n            repeaterFieldAdded++;\n\n            registerRepeaterItem(registeredData, [registeredData], $groupWrapper);\n        });\n\n        /**\n         * Init data when page loaded\n         */\n        CURRENT_DATA.forEach(function (group, indexGroup) {\n            var groupTemplate = fieldTemplate.fieldGroup;\n            groupTemplate = groupTemplate.replace(/__title__/gi, group.title || '');\n\n            var $groupTemplate = $(groupTemplate);\n\n            initCustomFieldsBoxes(group.items, $groupTemplate.find('.meta-boxes-body'));\n\n            $groupTemplate.data('lcf-field-group', group);\n\n            $_UPDATE_TO.append($groupTemplate);\n        });\n    };\n\n    var exportData = function () {\n        var getFieldGroups = function () {\n            var fieldGroups = [];\n\n            $('#custom_fields_container').find('> .meta-boxes').each(function () {\n                var $current = $(this);\n                var currentData = $current.data('lcf-field-group');\n                var $items = $current.find('> .meta-boxes-body > .meta-box');\n                currentData.items = getFieldItems($items);\n                fieldGroups.push(currentData);\n            });\n            return fieldGroups;\n        };\n\n        var getFieldItems = function ($items) {\n            var items = [];\n            $items.each(function () {\n                items.push(getFieldItemValue($(this)));\n            });\n            return items;\n        };\n\n        var getFieldItemValue = function ($item) {\n            var customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n            switch (customFieldData.type) {\n                case 'text':\n                case 'number':\n                case 'email':\n                case 'password':\n                case 'image':\n                case 'file':\n                    customFieldData.value = $item.find('> .meta-box-wrap input').val();\n                    break;\n                case 'wysiwyg':\n                case 'textarea':\n                    customFieldData.value = $item.find('> .meta-box-wrap textarea').val();\n                    break;\n                case 'checkbox':\n                    customFieldData.value = [];\n                    $item.find('> .meta-box-wrap input:checked').each(function () {\n                        customFieldData.value.push($(this).val());\n                    });\n                    break;\n                case 'radio':\n                    customFieldData.value = $item.find('> .meta-box-wrap input:checked').val();\n                    break;\n                case 'select':\n                    customFieldData.value = $item.find('> .meta-box-wrap select').val();\n                    break;\n                case 'repeater':\n                    customFieldData.value = [];\n                    var $repeaterItems = $item.find('> .meta-box-wrap > .lcf-repeater > .field-group-items > li');\n                    $repeaterItems.each(function () {\n                        var $current = $(this);\n                        var fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n                        customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n                    });\n                    break;\n                default:\n                    customFieldData = null;\n                    break;\n            }\n            return customFieldData;\n        };\n\n        var getRepeaterItemData = function ($where) {\n            var data = [];\n            $where.each(function () {\n                var $current = $(this);\n                data.push(getRepeaterItemValue($current));\n            });\n            return data;\n        };\n\n        var getRepeaterItemValue = function ($item) {\n            var customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n            switch (customFieldData.type) {\n                case 'text':\n                case 'number':\n                case 'email':\n                case 'password':\n                case 'image':\n                case 'file':\n                    customFieldData.value = $item.find('> .repeater-item-input input').val();\n                    break;\n                case 'wysiwyg':\n                case 'textarea':\n                    customFieldData.value = $item.find('> .repeater-item-input textarea').val();\n                    break;\n                case 'checkbox':\n                    customFieldData.value = [];\n                    $item.find('> .repeater-item-input input:checked').each(function () {\n                        customFieldData.value.push($(this).val());\n                    });\n                    break;\n                case 'radio':\n                    customFieldData.value = $item.find('> .repeater-item-input input:checked').val();\n                    break;\n                case 'select':\n                    customFieldData.value = $item.find('> .repeater-item-input select').val();\n                    break;\n                case 'repeater':\n                    customFieldData.value = [];\n                    var $repeaterItems = $item.find('> .repeater-item-input > .lcf-repeater > .field-group-items > li');\n                    $repeaterItems.each(function () {\n                        var $current = $(this);\n                        var fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n                        customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n                    });\n                    break;\n                default:\n                    customFieldData = null;\n                    break;\n            }\n            return customFieldData;\n        };\n\n        $_EXPORT_TO.closest('form').on('submit', function (event) {\n            $_EXPORT_TO.val(JSON.stringify(getFieldGroups()));\n        });\n    };\n\n    var initWYSIWYG = function (element) {\n        \"use strict\";\n        var type = element.data('type');\n        var config = {height: 200};\n        if (type == 'basic') {\n            config.toolbar = [['mode', 'Source', 'Image', 'TextColor', 'BGColor', 'Styles', 'Format', 'Font', 'FontSize', 'CreateDiv', 'PageBreak', 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', 'RemoveFormat']];\n        }\n\n        BEditor.initEditor(element, config);\n    };\n\n    return {\n        init: function () {\n            if (typeof CURRENT_DATA === 'undefined') {\n                return;\n            }\n            handleCustomFields();\n            exportData();\n\n            initWYSIWYG($(document).find('.wysiwyg-editor'));\n        }\n    }\n}(jQuery);\n\n(function ($) {\n    $(document).ready(function () {\n        UseCustomFields.init();\n    });\n})(jQuery);\n"]}