{"version":3,"sources":["edit-field-group.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"edit-field-group.js","sourcesContent":["/**\n * Works same as array_get function of Laravel\n * @param array\n * @param key\n * @param defaultValue\n * @returns {*}\n */\nvar array_get = function (array, key, defaultValue) {\n    \"use strict\";\n\n    if (typeof defaultValue === 'undefined') {\n        defaultValue = null;\n    }\n\n    var result;\n\n    try {\n        result = array[key];\n    } catch (err) {\n        result = defaultValue;\n    }\n\n    if(result === null) {\n        result = defaultValue;\n    }\n\n    return result;\n};\n\nvar stringToSlug = function (text, separator) {\n    \"use strict\";\n    separator = separator || '-';\n    return text.toString()\n    /*To lower case*/\n        .toLowerCase()\n        /*Vietnamese string*/\n        .replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a')\n        .replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e')\n        .replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i')\n        .replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o')\n        .replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u')\n        .replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y')\n        .replace(/đ/gi, 'd')\n        /*Replace spaces with -*/\n        .replace(/\\s+/g, separator)\n        /*Remove all non-word chars*/\n        .replace(/[^\\w\\-]+/g, '')\n        /*Replace multiple - with single -*/\n        .replace(/\\-\\-+/g, separator)\n        /*Trim - from start of text*/\n        .replace(/^-+/, '')\n        /*Trim - from end of text*/\n        .replace(/-+$/, '');\n};\nvar ManageCustomFields = function () {\n\n    var $body = $('body');\n\n    var RULES_GROUP_TEMPLATE_HTML = $('#rules_group_template').html();\n\n    /**\n     * Handle actions for update rules\n     */\n    var handleRules = function () {\n        var CURRENT_RULES = $.parseJSON($('#custom_fields_rules').val());\n        var $globalTemplate = $(RULES_GROUP_TEMPLATE_HTML),\n            $groupContainer = $('.line-group-container');\n\n        /**\n         * Add new rule\n         */\n        $body.on('click', '.location-add-rule', function (event) {\n            event.preventDefault();\n            var $current = $(this);\n            var $template = $globalTemplate.clone();\n\n            if ($current.hasClass('location-add-rule-and')) {\n                $current.closest('.line-group').append($template);\n            } else {\n                var $group = $('<div class=\"line-group\"></div>');\n\n                $group.append($template);\n                $groupContainer.append($group);\n            }\n            $template.find('.rule-a').trigger('change');\n        });\n\n        /**\n         * Change the rule-a\n         */\n        $body.on('change', '.rule-a', function (event) {\n            event.preventDefault();\n            var $current = $(this);\n            var $parent = $current.closest('.rule-line');\n            $parent.find('.rules-b-group select').addClass('hidden');\n            $parent.find('.rules-b-group select[data-rel=\"' + $current.val() + '\"]').removeClass('hidden');\n        });\n\n        /**\n         * Remove rule\n         */\n        $body.on('click', '.remove-rule-line', function (event) {\n            event.preventDefault();\n            var $current = $(this);\n            var $parent = $current.closest('.rule-line');\n            var $lineGroup = $current.closest('.line-group');\n            if ($lineGroup.find('.rule-line').length < 2) {\n                $lineGroup.remove();\n            } else {\n                $parent.remove();\n            }\n        });\n\n        /**\n         * Init data when page loaded\n         */\n        if (CURRENT_RULES.length < 1) {\n            $('.location-add-rule').trigger('click');\n        } else {\n            CURRENT_RULES.forEach(function (rules, indexRule) {\n                var $group = $('<div class=\"line-group\"></div>');\n                rules.forEach(function (item, index) {\n                    var $template = $globalTemplate.clone();\n                    $template.find('.rule-a').val(item.name);\n                    $template.find('.rule-type').val(item.type);\n                    $template.find('.rule-b:not([data-rel=\"' + item.name + '\"])').addClass('hidden');\n                    $template.find('.rule-b[data-rel=\"' + item.name + '\"]').val(item.value);\n                    $group.append($template);\n                });\n                $groupContainer.append($group);\n            });\n        }\n    };\n\n    /**\n     * Handle actions for update fields\n     */\n    var handleFieldGroups = function () {\n\n        var totalAdded = 0;\n\n        var CUSTOM_FIELDS_DATA = $.parseJSON($('#custom_fields').val());\n\n        /**\n         * Deleted fields\n         * @type {Array}\n         */\n        var DELETED_FIELDS = [];\n\n        /**\n         * Template of new field item\n         * @type {any}\n         */\n        var NEW_FIELD_TEMPLATE = $('#_new-field-source_template').html();\n\n        /**\n         * Get all option templates\n         * @type {{repeater: (any), defaultValue: (any), defaultValueTextarea: (any), placeholderText: (any), wysiwygToolbar: (any), selectChoices: (any), buttonLabel: (any)}}\n         */\n        var fieldOptions = {\n            repeater: $('#_options-repeater_template').html(),\n            defaultValue: $('#_options-defaultvalue_template').html(),\n            defaultValueTextarea: $('#_options-defaultvaluetextarea_template').html(),\n            placeholderText: $('#_options-placeholdertext_template').html(),\n            wysiwygToolbar: $('#_options-wysiwygtoolbar_template').html(),\n            selectChoices: $('#_options-selectchoices_template').html(),\n            buttonLabel: $('#_options-buttonlabel_template').html(),\n            rows: $('#_options-rows_template').html()\n        };\n\n        /**\n         * Get related options of current field type\n         * @param value\n         * @returns {string}\n         */\n        var getOptions = function (value) {\n            var htmlSrc = '';\n            switch (value) {\n                case 'text':\n                case 'email':\n                case 'password':\n                case 'number':\n                    htmlSrc += fieldOptions.defaultValue + fieldOptions.placeholderText;\n                    break;\n                case 'image':\n                case 'file':\n                    return '';\n                    break;\n                case 'textarea':\n                    htmlSrc += fieldOptions.defaultValueTextarea + fieldOptions.placeholderText + fieldOptions.rows;\n                    break;\n                case 'wysiwyg':\n                    htmlSrc += fieldOptions.defaultValueTextarea + fieldOptions.wysiwygToolbar;\n                    break;\n                case 'select':\n                    htmlSrc += fieldOptions.selectChoices + fieldOptions.defaultValue;\n                    break;\n                case 'checkbox':\n                    htmlSrc += fieldOptions.selectChoices;\n                    break;\n                case 'radio':\n                    htmlSrc += fieldOptions.selectChoices;\n                    break;\n                case 'repeater':\n                    htmlSrc += fieldOptions.repeater + fieldOptions.buttonLabel;\n                    break;\n                default:\n\n                    break;\n            }\n\n            return htmlSrc;\n        };\n\n        /**\n         * @param target\n         */\n        var reloadOrderNumber = function (target) {\n            target.each(function (index, el) {\n                var current = $(this);\n                var index_css = index + 1;\n                current.attr('data-position', index_css);\n            });\n        };\n\n        var setOrderNumber = function (target, number) {\n            target.attr('data-position', number || target.index() + 1);\n        };\n\n        var getNewFieldTemplate = function (optionType) {\n            return NEW_FIELD_TEMPLATE.replace(/___options___/gi, getOptions(optionType || 'text'));\n        };\n\n        /**\n         * Toggle show/hide content\n         */\n        $body.on('click', '.show-item-details', function (event) {\n            event.preventDefault();\n            var parent = $(this).closest('li');\n            $(this).toggleClass('active');\n            parent.toggleClass('active');\n        });\n        $body.on('click', '.btn-close-field', function (event) {\n            event.preventDefault();\n            var parent = $(this).closest('li');\n            parent.toggleClass('active');\n            parent.find('> .field-column .show-item-details').toggleClass('active');\n        });\n\n        /**\n         * Add field\n         */\n        $body.on('click', '.btn-add-field', function (event) {\n            event.preventDefault();\n            var $current = $(this);\n\n            totalAdded++;\n\n            var target = $current.closest('.add-new-field').find('> .sortable-wrapper');\n\n            var $template = $(getNewFieldTemplate());\n\n            target.append($template);\n\n            $template.find('.line[data-option=title] input[type=text]').focus();\n\n            setOrderNumber($template);\n\n            //reloadOrderNumber(target.find('> li'));\n            $template.find('.sortable-wrapper').sortable();\n        });\n\n        /**\n         * Change field type\n         */\n        $body.on('change', '.change-field-type', function (event) {\n            event.preventDefault();\n            var $current = $(this);\n            var parent = $current.closest('.item-details');\n            var target = parent.find('> .options');\n\n            target.html(getOptions($current.val()));\n        });\n\n        /**\n         * Change the related columns title\n         */\n        $body.on('change blur', '.line[data-option=slug] input[type=text]', function (event) {\n            var $current = $(this);\n            var text = stringToSlug($current.val(), '_');\n            var $parent = $current.closest('.line');\n\n            $parent.closest('.ui-sortable-handle').find('> .field-column .field-slug').text(text);\n\n            $current.val(text);\n        });\n        $body.on('change blur', '.line[data-option=type] select', function (event) {\n            var $current = $(this);\n            var text = stringToSlug($current.val(), '_');\n            var $parent = $current.closest('.line');\n\n            $parent.closest('.ui-sortable-handle').find('> .field-column .field-type').text(text);\n\n            $current.val(text);\n        });\n        $body.on('change blur', '.line[data-option=title] input[type=text]', function (event) {\n            var $current = $(this);\n            var $parent = $current.closest('.line');\n            var $nameSlugField = $parent.find('~ .line[data-option=slug] input[type=text]');\n            var text = $current.val();\n\n            /**\n             * Change the line title\n             */\n            $parent.closest('.ui-sortable-handle').find('> .field-column .field-label').text(text);\n\n            /**\n             * Change field name\n             */\n            if (!$nameSlugField.val()) {\n                $nameSlugField.val(stringToSlug(text, '_')).trigger('change');\n            }\n        });\n\n        /**\n         * Delete field\n         */\n        $('#deleted_items').val('');\n        $body.on('click', '.btn-remove', function (event) {\n            event.preventDefault();\n            var $parent = $(this).closest('.ui-sortable-handle');\n            var $grandParent = $parent.parent();\n            DELETED_FIELDS.push($parent.data('id'));\n            $parent.animate({\n                    top: -60,\n                    left: 60,\n                    opacity: 0.3\n                },\n                300,\n                function () {\n                    $parent.remove();\n                    reloadOrderNumber($grandParent.find('> li'));\n                });\n            $('#deleted_items').val(JSON.stringify(DELETED_FIELDS));\n        });\n\n        /**\n         *\n         * @param fields\n         * @param $appendTo\n         */\n        var initFields = function (fields, $appendTo) {\n            /**\n             * Enable sortable\n             */\n            $appendTo.sortable();\n\n            fields.forEach(function (field, indexField) {\n                var $template = $(getNewFieldTemplate(field.type || 'text'));\n                $template.data('id', field.id || 0);\n                $template.find('.line[data-option=type] select').val(array_get(field, 'type', 'text'));\n                $template.find('.line[data-option=title] input').val(array_get(field, 'title', ''));\n                $template.find('.line[data-option=slug] input').val(array_get(field, 'slug', ''));\n                $template.find('.line[data-option=instructions] textarea').val(array_get(field, 'instructions', ''));\n\n                $template.find('.line[data-option=defaultvalue] input').val(array_get(field.options, 'defaultValue', ''));\n                $template.find('.line[data-option=defaultvaluetextarea] textarea').val(array_get(field.options, 'defaultValueTextarea', ''));\n                $template.find('.line[data-option=placeholdertext] input').val(array_get(field.options, 'placeholderText', ''));\n                $template.find('.line[data-option=wysiwygtoolbar] select').val(array_get(field.options, 'wysiwygToolbar', 'basic'));\n                $template.find('.line[data-option=selectchoices] textarea').val(array_get(field.options, 'selectChoices', ''));\n                $template.find('.line[data-option=buttonlabel] input').val(array_get(field.options, 'buttonLabel', ''));\n                $template.find('.line[data-option=rows] input').val(array_get(field.options, 'rows', ''));\n\n                $template.find('.field-label').html(array_get(field, 'title', 'Text'));\n                $template.find('.field-slug').html(array_get(field, 'slug', 'text'));\n                $template.find('.field-type').html(array_get(field, 'type', 'text'));\n\n                $template.removeClass('active');\n                $template.attr('data-position', (indexField + 1));\n\n                initFields(field.items, $template.find('.sortable-wrapper'));\n\n                $appendTo.append($template);\n            });\n        };\n        initFields(CUSTOM_FIELDS_DATA, $('.sortable-wrapper'));\n    };\n\n    /**\n     * Export data\n     * @type {{exportRulesToJson, exportFieldsToJson}}\n     */\n    var exportData = function () {\n        return {\n            exportRulesToJson: function () {\n                var result = [];\n\n                $('.custom-fields-rules .line-group-container .line-group').each(function () {\n                    var $current = $(this);\n                    var lineGroupData = [];\n                    $current.find('.rule-line').each(function (index, element) {\n                        var $currentLine = $(this);\n\n                        var data = {\n                            name: $currentLine.find('.rule-a').val(),\n                            type: $currentLine.find('.rule-type').val(),\n                            value: $currentLine.find('.rule-b:not(.hidden)').val()\n                        };\n                        lineGroupData.push(data);\n                    });\n                    if (lineGroupData.length > 0) {\n                        result.push(lineGroupData);\n                    }\n                });\n\n                return result;\n            },\n            exportFieldsToJson: function () {\n                var result = [];\n\n                var getAllFields = function ($from, $pushTo) {\n                    $from.each(function (index, element) {\n                        var object = {};\n                        var $current = $(this);\n\n                        object.id = $current.data('id') || 0;\n                        object.title = $current.find('> .item-details > .line[data-option=title] input[type=text]').val() || null;\n                        object.slug = $current.find('> .item-details > .line[data-option=slug] input[type=text]').val() || null;\n                        object.instructions = $current.find('> .item-details > .line[data-option=instructions] textarea').val() || null;\n                        object.type = $current.find('> .item-details > .line[data-option=type] select').val() || null;\n                        object.options = {\n                            defaultValue: $current.find('> .item-details > .options > .line[data-option=defaultvalue] input[type=text]').val() || null,\n                            defaultValueTextarea: $current.find('> .item-details > .options > .line[data-option=defaultvaluetextarea] textarea').val() || null,\n                            placeholderText: $current.find('> .item-details > .options > .line[data-option=placeholdertext] input[type=text]').val() || null,\n                            wysiwygToolbar: $current.find('> .item-details > .options > .line[data-option=wysiwygtoolbar] select').val() || null,\n                            selectChoices: $current.find('> .item-details > .options > .line[data-option=selectchoices] textarea').val() || null,\n                            buttonLabel: $current.find('> .item-details > .options > .line[data-option=buttonlabel] input[type=text]').val() || null,\n                            rows: $current.find('> .item-details > .options > .line[data-option=rows] input[type=number]').val() || null\n                        };\n                        object.items = [];\n\n                        getAllFields($current.find('> .item-details > .options > .line[data-option=repeater] > .col-xs-9 > .add-new-field > .sortable-wrapper > .ui-sortable-handle'), object.items);\n\n                        $pushTo.push(object);\n                    });\n                };\n\n                getAllFields($('#custom_field_group_items > .ui-sortable-handle'), result);\n\n                return result;\n            }\n        }\n    }();\n\n    return {\n        /**\n         * Init the module\n         */\n        init: function () {\n            handleRules();\n\n            handleFieldGroups();\n\n            /**\n             * Pass data to form when submit\n             */\n            $body.on('submit', '.form-update-field-group', function (event) {\n                // event.preventDefault();\n                var dataRules = JSON.stringify(exportData.exportRulesToJson());\n                var dataFields = JSON.stringify(exportData.exportFieldsToJson());\n                $('#custom_fields_rules').html(dataRules).val(dataRules);\n                $('#custom_fields').html(dataFields).val(dataFields);\n            });\n        }\n    };\n\n}();\n\n(function ($) {\n    $(window).load(function () {\n        ManageCustomFields.init();\n    });\n})(jQuery);\n"]}